{"ast":null,"code":"var _jsxFileName = \"/Users/alakesmi/Desktop/ToDoList Project/todolist/src/Components/Todos.tsx\",\n    _s = $RefreshSig$();\n\nimport { Row } from \"./Row\";\nimport { data } from \"../todos\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Todos = () => {\n  _s();\n\n  //useState, type of array of tasks.\n  const [todos, setTodos] = useState(data); // Handler which will take an ID and delete it from the list. Look through tasks and filter out the ID which got clicked.\n  // Then updates the list of tasks with the filtered vers.\n\n  const handleDelete = id => {\n    const updatedTasks = todos.filter(todo => todo.id != id);\n    setTodos(updatedTasks);\n  };\n\n  const handleComplete = id => {\n    const updatedTasks = todos.map(todo => {\n      if (todo.id == id) {\n        return { ...todo,\n          isCompleted: !todo.isCompleted\n        };\n      }\n\n      return todo;\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    children: todos.map(todo => /*#__PURE__*/_jsxDEV(Row, {\n      todo: todo,\n      handleDelete: handleDelete\n    }, todo.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Todos, \"cdGzPofdglHhBqPNXLQCqDCIfNM=\");\n\n_c = Todos;\n\nvar _c;\n\n$RefreshReg$(_c, \"Todos\");","map":{"version":3,"sources":["/Users/alakesmi/Desktop/ToDoList Project/todolist/src/Components/Todos.tsx"],"names":["Row","data","useState","Todos","todos","setTodos","handleDelete","id","updatedTasks","filter","todo","handleComplete","map","isCompleted"],"mappings":";;;AAAA,SAASA,GAAT,QAAoB,OAApB;AACA,SAASC,IAAT,QAAqB,UAArB;AACA,SAASC,QAAT,QAAyB,OAAzB;;AAQA,OAAO,MAAMC,KAAK,GAAG,MAAM;AAAA;;AACzB;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBH,QAAQ,CAASD,IAAT,CAAlC,CAFyB,CAIzB;AACA;;AACA,QAAMK,YAAY,GAAIC,EAAD,IAAgB;AACnC,UAAMC,YAAY,GAAGJ,KAAK,CAACK,MAAN,CAAcC,IAAD,IAAUA,IAAI,CAACH,EAAL,IAAWA,EAAlC,CAArB;AACAF,IAAAA,QAAQ,CAACG,YAAD,CAAR;AACD,GAHD;;AAKA,QAAMG,cAAc,GAAIJ,EAAD,IAAgB;AACrC,UAAMC,YAAY,GAAGJ,KAAK,CAACQ,GAAN,CAAWF,IAAD,IAAU;AACvC,UAAIA,IAAI,CAACH,EAAL,IAAWA,EAAf,EAAmB;AACjB,eAAO,EACL,GAAGG,IADE;AAELG,UAAAA,WAAW,EAAE,CAACH,IAAI,CAACG;AAFd,SAAP;AAID;;AACD,aAAOH,IAAP;AACD,KARoB,CAArB;AASD,GAVD;;AAYA,sBACE;AAAA,cACGN,KAAK,CAACQ,GAAN,CAAWF,IAAD,iBACT,QAAC,GAAD;AAAmB,MAAA,IAAI,EAAEA,IAAzB;AAA+B,MAAA,YAAY,EAAEJ;AAA7C,OAAUI,IAAI,CAACH,EAAf;AAAA;AAAA;AAAA;AAAA,YADD;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAOD,CA9BM;;GAAMJ,K;;KAAAA,K","sourcesContent":["import { Row } from \"./Row\";\nimport { data } from \"../todos\";\nimport { useState } from \"react\";\n\ntype Todo = {\n  id: string;\n  task: string;\n  isCompleted: boolean;\n};\n\nexport const Todos = () => {\n  //useState, type of array of tasks.\n  const [todos, setTodos] = useState<Todo[]>(data);\n\n  // Handler which will take an ID and delete it from the list. Look through tasks and filter out the ID which got clicked.\n  // Then updates the list of tasks with the filtered vers.\n  const handleDelete = (id: string) => {\n    const updatedTasks = todos.filter((todo) => todo.id != id);\n    setTodos(updatedTasks);\n  };\n\n  const handleComplete = (id: string) => {\n    const updatedTasks = todos.map((todo) => {\n      if (todo.id == id) {\n        return {\n          ...todo,\n          isCompleted: !todo.isCompleted,\n        };\n      }\n      return todo;\n    });\n  };\n\n  return (\n    <section>\n      {todos.map((todo) => (\n        <Row key={todo.id} todo={todo} handleDelete={handleDelete} />\n      ))}\n    </section>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}