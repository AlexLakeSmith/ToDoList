{"ast":null,"code":"var _jsxFileName = \"/Users/alakesmi/Desktop/ToDoList Project/todolist/src/Components/Todos.tsx\",\n    _s = $RefreshSig$();\n\nimport { Row } from \"./Row\";\nimport { data } from \"../todos\";\nimport { useState } from \"react\";\nimport { AddTask } from \"./AddTask\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Todos = () => {\n  _s();\n\n  //useState, type of array of tasks.\n  const [todos, setTodos] = useState(data); // UseState hook for adding a new task.\n\n  const [task, setTask] = useState(\"\");\n\n  const handleChange = e => {\n    const {\n      value\n    } = e.target;\n    setTask(value);\n  };\n\n  const handleAddTask = todo => {}; // Handler which will take an ID and delete it from the list. Look through tasks and filter out the ID which got clicked.\n  // Then updates the list of tasks with the filtered vers.\n\n\n  const handleDelete = id => {\n    const updatedTasks = todos.filter(todo => todo.id != id);\n    setTodos(updatedTasks);\n  }; //Handler which will take the ID and map\n\n\n  const handleComplete = id => {\n    const updatedTasks = todos.map(todo => {\n      if (todo.id == id) {\n        return { ...todo,\n          isCompleted: !todo.isCompleted\n        };\n      }\n\n      return todo;\n    });\n    setTodos(updatedTasks);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    children: [/*#__PURE__*/_jsxDEV(AddTask, {\n      task: task\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), todos.map(todo => /*#__PURE__*/_jsxDEV(Row, {\n      todo: todo,\n      handleDelete: handleDelete,\n      handleComplete: handleComplete\n    }, todo.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Todos, \"qFkGyT4pGIB1EvYxPD/+IidUob8=\");\n\n_c = Todos;\n\nvar _c;\n\n$RefreshReg$(_c, \"Todos\");","map":{"version":3,"sources":["/Users/alakesmi/Desktop/ToDoList Project/todolist/src/Components/Todos.tsx"],"names":["Row","data","useState","AddTask","Todos","todos","setTodos","task","setTask","handleChange","e","value","target","handleAddTask","todo","handleDelete","id","updatedTasks","filter","handleComplete","map","isCompleted"],"mappings":";;;AAAA,SAASA,GAAT,QAAoB,OAApB;AACA,SAASC,IAAT,QAAqB,UAArB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,SAASC,OAAT,QAAwB,WAAxB;;AAQA,OAAO,MAAMC,KAAK,GAAG,MAAM;AAAA;;AACzB;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBJ,QAAQ,CAASD,IAAT,CAAlC,CAFyB,CAGzB;;AACA,QAAM,CAACM,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAAC,EAAD,CAAhC;;AAEA,QAAMO,YAAY,GAAIC,CAAD,IAAoB;AACvC,UAAM;AAAEC,MAAAA;AAAF,QAAYD,CAAC,CAACE,MAApB;AACAJ,IAAAA,OAAO,CAACG,KAAD,CAAP;AACD,GAHD;;AAKA,QAAME,aAAa,GAAIC,IAAD,IAAgB,CAAE,CAAxC,CAXyB,CAazB;AACA;;;AACA,QAAMC,YAAY,GAAIC,EAAD,IAAgB;AACnC,UAAMC,YAAY,GAAGZ,KAAK,CAACa,MAAN,CAAcJ,IAAD,IAAUA,IAAI,CAACE,EAAL,IAAWA,EAAlC,CAArB;AACAV,IAAAA,QAAQ,CAACW,YAAD,CAAR;AACD,GAHD,CAfyB,CAoBzB;;;AACA,QAAME,cAAc,GAAIH,EAAD,IAAgB;AACrC,UAAMC,YAAY,GAAGZ,KAAK,CAACe,GAAN,CAAWN,IAAD,IAAU;AACvC,UAAIA,IAAI,CAACE,EAAL,IAAWA,EAAf,EAAmB;AACjB,eAAO,EACL,GAAGF,IADE;AAELO,UAAAA,WAAW,EAAE,CAACP,IAAI,CAACO;AAFd,SAAP;AAID;;AACD,aAAOP,IAAP;AACD,KARoB,CAArB;AASAR,IAAAA,QAAQ,CAACW,YAAD,CAAR;AACD,GAXD;;AAaA,sBACE;AAAA,4BACE,QAAC,OAAD;AAAS,MAAA,IAAI,EAAEV;AAAf;AAAA;AAAA;AAAA;AAAA,YADF,EAEGF,KAAK,CAACe,GAAN,CAAWN,IAAD,iBACT,QAAC,GAAD;AAEE,MAAA,IAAI,EAAEA,IAFR;AAGE,MAAA,YAAY,EAAEC,YAHhB;AAIE,MAAA,cAAc,EAAEI;AAJlB,OACOL,IAAI,CAACE,EADZ;AAAA;AAAA;AAAA;AAAA,YADD,CAFH;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAaD,CA/CM;;GAAMZ,K;;KAAAA,K","sourcesContent":["import { Row } from \"./Row\";\nimport { data } from \"../todos\";\nimport { useState } from \"react\";\nimport { AddTask } from \"./AddTask\";\n\ntype Todo = {\n  id: string;\n  task: string;\n  isCompleted: boolean;\n};\n\nexport const Todos = () => {\n  //useState, type of array of tasks.\n  const [todos, setTodos] = useState<Todo[]>(data);\n  // UseState hook for adding a new task.\n  const [task, setTask] = useState(\"\");\n\n  const handleChange = (e: changeEvent) => {\n    const { value } = e.target as HTMLInputElement;\n    setTask(value);\n  };\n\n  const handleAddTask = (todo: Todo) => {};\n\n  // Handler which will take an ID and delete it from the list. Look through tasks and filter out the ID which got clicked.\n  // Then updates the list of tasks with the filtered vers.\n  const handleDelete = (id: string) => {\n    const updatedTasks = todos.filter((todo) => todo.id != id);\n    setTodos(updatedTasks);\n  };\n\n  //Handler which will take the ID and map\n  const handleComplete = (id: string) => {\n    const updatedTasks = todos.map((todo) => {\n      if (todo.id == id) {\n        return {\n          ...todo,\n          isCompleted: !todo.isCompleted,\n        };\n      }\n      return todo;\n    });\n    setTodos(updatedTasks);\n  };\n\n  return (\n    <section>\n      <AddTask task={task} />\n      {todos.map((todo) => (\n        <Row\n          key={todo.id}\n          todo={todo}\n          handleDelete={handleDelete}\n          handleComplete={handleComplete}\n        />\n      ))}\n    </section>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}