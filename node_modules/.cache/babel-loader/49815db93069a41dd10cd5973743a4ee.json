{"ast":null,"code":"var _jsxFileName = \"/Users/alakesmi/Desktop/Project1/src/Components/Todos.tsx\",\n    _s = $RefreshSig$();\n\nimport { Row } from \"./Row\";\nimport { data } from \"../todos\";\nimport { useState } from \"react\";\nimport { v4 as uuid } from \"uuid\";\nimport { AddTask } from \"./AddTask\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Todos = () => {\n  _s();\n\n  //useState, type of array of tasks.\n  const [todos, setTodos] = useState(data); // UseState hook for adding a new task.\n\n  const [task, setTask] = useState(\"\"); // TasksLength: How many tasks left\n\n  const tasksLength = todos.length; // HasTasks: Are there any tasks left?\n\n  const hasTasks = tasksLength > 0; // Remaining Tasks: # of tasks left to do which aren't marked complete.\n\n  const remainingTasks = todos.filter(todo => !todo.isCompleted);\n\n  const handleChange = e => {\n    const {\n      value\n    } = e.target;\n    setTask(value);\n  };\n\n  const handleAddTask = todo => {\n    const updatedTasks = [...todos, todo];\n    setTodos(updatedTasks);\n    setTask(\"\");\n  };\n\n  const handleSubmitTask = e => {\n    e.preventDefault();\n    const todo = {\n      id: uuid(),\n      task: task,\n      isCompleted: false\n    };\n    task && handleAddTask(todo);\n  }; // Handler which will take an ID and delete it from the list. Look through tasks and filter out the ID which got clicked.\n  // Then updates the list of tasks with the filtered vers.\n\n\n  const handleDelete = id => {\n    const updatedTasks = todos.filter(todo => todo.id != id);\n    setTodos(updatedTasks);\n  }; //Handler which will take the ID and map\n\n\n  const handleComplete = id => {\n    const updatedTasks = todos.map(todo => {\n      if (todo.id == id) {\n        return { ...todo,\n          isCompleted: !todo.isCompleted\n        };\n      }\n\n      return todo;\n    });\n    setTodos(updatedTasks);\n  };\n\n  const remainingMessage = () => {\n    if (!remainingTasks) {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Please add a task!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 14\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"X tasks to complete.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 14\n      }, this);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    children: [todos.map(todo => /*#__PURE__*/_jsxDEV(Row, {\n      todo: todo,\n      handleDelete: handleDelete,\n      handleComplete: handleComplete\n    }, todo.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(AddTask, {\n      task: task,\n      handleChange: handleChange,\n      handleSubmitTask: handleSubmitTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), !hasTasks && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Please add a task!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 21\n    }, this), hasTasks && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"[\", remainingTodos, \" of \", todosLength, \"] todos remaining\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Todos, \"qFkGyT4pGIB1EvYxPD/+IidUob8=\");\n\n_c = Todos;\n\nvar _c;\n\n$RefreshReg$(_c, \"Todos\");","map":{"version":3,"sources":["/Users/alakesmi/Desktop/Project1/src/Components/Todos.tsx"],"names":["Row","data","useState","v4","uuid","AddTask","Todos","todos","setTodos","task","setTask","tasksLength","length","hasTasks","remainingTasks","filter","todo","isCompleted","handleChange","e","value","target","handleAddTask","updatedTasks","handleSubmitTask","preventDefault","id","handleDelete","handleComplete","map","remainingMessage","remainingTodos","todosLength"],"mappings":"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","sourcesContent":["import { Row } from \"./Row\";\nimport { data } from \"../todos\";\nimport { FormEvent, useState, ChangeEvent } from \"react\";\nimport { v4 as uuid } from \"uuid\";\nimport { AddTask } from \"./AddTask\";\n\ntype Todo = {\n  id: string;\n  task: string;\n  isCompleted: boolean;\n};\n\nexport const Todos = () => {\n  //useState, type of array of tasks.\n  const [todos, setTodos] = useState<Todo[]>(data);\n  // UseState hook for adding a new task.\n  const [task, setTask] = useState(\"\");\n\n  // TasksLength: How many tasks left\n  const tasksLength = todos.length;\n  // HasTasks: Are there any tasks left?\n  const hasTasks = tasksLength > 0;\n  // Remaining Tasks: # of tasks left to do which aren't marked complete.\n  const remainingTasks = todos.filter((todo) => !todo.isCompleted);\n\n  const handleChange = (e: ChangeEvent) => {\n    const { value } = e.target as HTMLInputElement;\n    setTask(value);\n  };\n\n  const handleAddTask = (todo: Todo) => {\n    const updatedTasks = [...todos, todo];\n    setTodos(updatedTasks);\n    setTask(\"\");\n  };\n\n  const handleSubmitTask = (e: FormEvent) => {\n    e.preventDefault();\n    const todo = {\n      id: uuid(),\n      task: task,\n      isCompleted: false,\n    };\n    task && handleAddTask(todo);\n  };\n\n  // Handler which will take an ID and delete it from the list. Look through tasks and filter out the ID which got clicked.\n  // Then updates the list of tasks with the filtered vers.\n  const handleDelete = (id: string) => {\n    const updatedTasks = todos.filter((todo) => todo.id != id);\n    setTodos(updatedTasks);\n  };\n\n  //Handler which will take the ID and map\n  const handleComplete = (id: string) => {\n    const updatedTasks = todos.map((todo) => {\n      if (todo.id == id) {\n        return {\n          ...todo,\n          isCompleted: !todo.isCompleted,\n        };\n      }\n      return todo;\n    });\n    setTodos(updatedTasks);\n  };\n\n  const remainingMessage = () => {\n    if (!remainingTasks) {\n      return <p>Please add a task!</p>;\n    } else {\n      return <p>X tasks to complete.</p>;\n    }\n  };\n\n  return (\n    <section>\n      {todos.map((todo) => (\n        <Row\n          key={todo.id}\n          todo={todo}\n          handleDelete={handleDelete}\n          handleComplete={handleComplete}\n        />\n      ))}\n      <AddTask\n        task={task}\n        handleChange={handleChange}\n        handleSubmitTask={handleSubmitTask}\n      />\n      {!hasTasks && <p>Please add a task!</p>}\n      {hasTasks && (\n        <p>\n          [{remainingTodos} of {todosLength}] todos remaining\n        </p>\n      )}\n    </section>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}