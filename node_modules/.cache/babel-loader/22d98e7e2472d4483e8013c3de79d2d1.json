{"ast":null,"code":"var _jsxFileName = \"/Users/alakesmi/Desktop/ToDoList Project/todolist/src/Components/Row.tsx\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n// Creating the row component, this would be the actual to-do itself.\nexport const Row = _ref => {\n  let {\n    todo: {\n      task,\n      isCompleted,\n      id\n    },\n    handleDelete\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: task\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          \"aria-label\": \"Delete a task\",\n          onClick: () => handleDelete(id),\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          checked: isCompleted,\n          onChange: () => null\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_c = Row;\n\nvar _c;\n\n$RefreshReg$(_c, \"Row\");","map":{"version":3,"sources":["/Users/alakesmi/Desktop/ToDoList Project/todolist/src/Components/Row.tsx"],"names":["Row","todo","task","isCompleted","id","handleDelete"],"mappings":";;;AAYA;AACA,OAAO,MAAMA,GAAG,GAAG,QAGF;AAAA,MAHG;AAClBC,IAAAA,IAAI,EAAE;AAAEC,MAAAA,IAAF;AAAQC,MAAAA,WAAR;AAAqBC,MAAAA;AAArB,KADY;AAElBC,IAAAA;AAFkB,GAGH;AACf,sBACE;AAAA,2BACE;AAAA,8BACE;AAAA,kBAAIH;AAAJ;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA,gCACE;AAAQ,wBAAW,eAAnB;AAAmC,UAAA,OAAO,EAAE,MAAMG,YAAY,CAACD,EAAD,CAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAIE;AAAO,UAAA,IAAI,EAAC,UAAZ;AAAuB,UAAA,OAAO,EAAED,WAAhC;AAA6C,UAAA,QAAQ,EAAE,MAAM;AAA7D;AAAA;AAAA;AAAA;AAAA,gBAJF;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAaD,CAjBM;KAAMH,G","sourcesContent":["// We must create the different types of props.\ntype Todo = {\n  id: string;\n  task: string;\n  isCompleted: boolean;\n};\n\ntype TodoProps = {\n  todo: Todo;\n  handleDelete: (id: string) => void;\n};\n\n// Creating the row component, this would be the actual to-do itself.\nexport const Row = ({\n  todo: { task, isCompleted, id },\n  handleDelete,\n}: TodoProps) => {\n  return (\n    <>\n      <div>\n        <p>{task}</p>\n        <div>\n          <button aria-label=\"Delete a task\" onClick={() => handleDelete(id)}>\n            Delete\n          </button>\n          <input type=\"checkbox\" checked={isCompleted} onChange={() => null} />\n        </div>\n      </div>\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}