[{"/Users/alakesmi/Desktop/ToDoList Project/todolist/src/index.tsx":"1","/Users/alakesmi/Desktop/ToDoList Project/todolist/src/App.tsx":"2","/Users/alakesmi/Desktop/ToDoList Project/todolist/src/Components/Todos.tsx":"3","/Users/alakesmi/Desktop/ToDoList Project/todolist/src/todos.ts":"4","/Users/alakesmi/Desktop/ToDoList Project/todolist/src/Components/Row.tsx":"5","/Users/alakesmi/Desktop/ToDoList Project/todolist/src/Components/AddTask.tsx":"6"},{"size":221,"mtime":1647826494926,"results":"7","hashOfConfig":"8"},{"size":231,"mtime":1647828450014,"results":"9","hashOfConfig":"8"},{"size":2219,"mtime":1647835029108,"results":"10","hashOfConfig":"8"},{"size":237,"mtime":1647830665562,"results":"11","hashOfConfig":"8"},{"size":811,"mtime":1647831968272,"results":"12","hashOfConfig":"8"},{"size":784,"mtime":1647834386885,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},"1qdja4k",{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"17"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"29"},"/Users/alakesmi/Desktop/ToDoList Project/todolist/src/index.tsx",[],[],["37","38"],"/Users/alakesmi/Desktop/ToDoList Project/todolist/src/App.tsx",["39"],[],"import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { Todos } from \"./Components/Todos\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Todos />\n    </div>\n  );\n}\n\nexport default App;\n","/Users/alakesmi/Desktop/ToDoList Project/todolist/src/Components/Todos.tsx",["40","41","42","43"],[],"import { Row } from \"./Row\";\nimport { data } from \"../todos\";\nimport { FormEvent, useState, ChangeEvent } from \"react\";\nimport { v4 as uuid } from \"uuid\";\nimport { AddTask } from \"./AddTask\";\n\ntype Todo = {\n  id: string;\n  task: string;\n  isCompleted: boolean;\n};\n\nexport const Todos = () => {\n  //useState, type of array of tasks.\n  const [todos, setTodos] = useState<Todo[]>(data);\n  // UseState hook for adding a new task.\n  const [task, setTask] = useState(\"\");\n  // TasksLength: How many tasks left\n  const tasksLength = todos.length;\n  // HasTasks: Are there any tasks left?\n  const hasTasks = tasksLength > 0;\n  // Remaining Tasks: # of tasks left to do which aren't marked complete.\n  const remainingTasks = todos.filter((todo) => !todo.isCompleted);\n\n  const handleChange = (e: ChangeEvent) => {\n    const { value } = e.target as HTMLInputElement;\n    setTask(value);\n  };\n\n  const handleAddTask = (todo: Todo) => {\n    const updatedTasks = [...todos, todo];\n    setTodos(updatedTasks);\n    setTask(\"\");\n  };\n\n  const handleSubmitTask = (e: FormEvent) => {\n    e.preventDefault();\n    const todo = {\n      id: uuid(),\n      task: task,\n      isCompleted: false,\n    };\n    task && handleAddTask(todo);\n  };\n\n  // Handler which will take an ID and delete it from the list. Look through tasks and filter out the ID which got clicked.\n  // Then updates the list of tasks with the filtered vers.\n  const handleDelete = (id: string) => {\n    const updatedTasks = todos.filter((todo) => todo.id != id);\n    setTodos(updatedTasks);\n  };\n\n  //Handler which will take the ID and map\n  const handleComplete = (id: string) => {\n    const updatedTasks = todos.map((todo) => {\n      if (todo.id == id) {\n        return {\n          ...todo,\n          isCompleted: !todo.isCompleted,\n        };\n      }\n      return todo;\n    });\n    setTodos(updatedTasks);\n  };\n\n  return (\n    <section>\n      {todos.map((todo) => (\n        <Row\n          key={todo.id}\n          todo={todo}\n          handleDelete={handleDelete}\n          handleComplete={handleComplete}\n        />\n      ))}\n      <AddTask\n        task={task}\n        handleChange={handleChange}\n        handleSubmitTask={handleSubmitTask}\n      />\n    </section>\n  );\n};\n","/Users/alakesmi/Desktop/ToDoList Project/todolist/src/todos.ts",[],[],["44","45"],"/Users/alakesmi/Desktop/ToDoList Project/todolist/src/Components/Row.tsx",[],[],"/Users/alakesmi/Desktop/ToDoList Project/todolist/src/Components/AddTask.tsx",["46"],[],"import { ReactComponent as PlusIcon } from \"../assets/svg/plus.svg\";\nimport { FormEvent, useState, ChangeEvent } from \"react\";\n\n// Destructure task from the props.\nexport type AddTodoProps = {\n  task: string;\n  handleSubmitTask: (e: FormEvent) => void;\n  handleChange: (e: ChangeEvent) => void;\n};\n\n// Assign the created prop types to the component.\n// Form for inputting a new task and an add button to add the task to the list.\nexport const AddTask = ({\n  task,\n  handleSubmitTask,\n  handleChange,\n}: AddTodoProps) => {\n  return (\n    <>\n      <form onSubmit={handleSubmitTask}>\n        <input type=\"text\" name=\"task\" value={task} onChange={handleChange} />\n        <button type=\"submit\" aria-label=\"Add task\">\n          <PlusIcon />\n        </button>\n      </form>\n    </>\n  );\n};\n",{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","severity":1,"message":"52","line":2,"column":8,"nodeType":"53","messageId":"54","endLine":2,"endColumn":12},{"ruleId":"51","severity":1,"message":"55","line":21,"column":9,"nodeType":"53","messageId":"54","endLine":21,"endColumn":17},{"ruleId":"51","severity":1,"message":"56","line":23,"column":9,"nodeType":"53","messageId":"54","endLine":23,"endColumn":23},{"ruleId":"57","severity":1,"message":"58","line":49,"column":57,"nodeType":"59","messageId":"60","endLine":49,"endColumn":59},{"ruleId":"57","severity":1,"message":"61","line":56,"column":19,"nodeType":"59","messageId":"60","endLine":56,"endColumn":21},{"ruleId":"47","replacedBy":"62"},{"ruleId":"49","replacedBy":"63"},{"ruleId":"51","severity":1,"message":"64","line":2,"column":21,"nodeType":"53","messageId":"54","endLine":2,"endColumn":29},"no-native-reassign",["65"],"no-negated-in-lhs",["66"],"@typescript-eslint/no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'hasTasks' is assigned a value but never used.","'remainingTasks' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.",["65"],["66"],"'useState' is defined but never used.","no-global-assign","no-unsafe-negation"]